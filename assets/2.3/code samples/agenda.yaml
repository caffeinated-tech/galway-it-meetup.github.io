alias: Agenda with Shopping List
description: "This automation fetches the weather forecast, the news (via custom sensors), calendar events, and shopping list items,
  processes the information using a conversation agent, and sends a notification with the agenda for the day. I use telegram as the notification service, but others might be suitable for you!"
triggers:
  - at: "08:00:00"
    trigger: time
  - trigger: time
    at: "14:00:00"
actions:
  - variables:
      weather_entity: weather.home
      calendar_entity: calendar.house
      zone_entity: zone.home
      calendar_duration:
        hours: 18
      sensor_local: "{{ states('sensor.local_bulletin') }}"
      sensor_national: "{{ states('sensor.irish_bulletin') }}"
      prompt: >-
        Please generate text that will be sent to the users

        smartphone with helpful information.


        You are a helpful personal agent that generates text for the user:

        - Your answers are helpful, friendly, warm, insightful.

        - Your answers are not technical.

        - If reporting on weather, headlines or bulletins, report the information and
        report it accurately.

        - Your messages help the user prepare for their day, for example:
          - Making note of unusual weather for the location and time of year
          - How much time remaining until their first meeting
          - Anything that may be special or unique, such as celebrating a birthday
          
  - alias: Fetch Weather Forecast
    action: weather.get_forecasts
    data:
      type: daily
    target:
      entity_id:
        - "{{ weather_entity }}"
    response_variable: daily_forecast
  - variables:
      forecast_entity: "{{ daily_forecast[weather_entity] }}"
      forecast: "{{ forecast_entity.forecast[0] }}"
  - alias: Fetch Calendar Agenda
    action: calendar.get_events
    data:
      duration:
        hours: 18
    target:
      entity_id: calendar.house
    response_variable: events_response
  - alias: Fetch Shopping List
    action: todo.get_items
    data:
      status: needs_action
    target:
      entity_id: todo.shopping_list
    response_variable: todo_response
  - alias: Fetch Calendar Agenda
    action: calendar.get_events
    data:
      duration:
        hours: 18
    target:
      entity_id: calendar.house
    response_variable: events_response
  - alias: Conversation Agent Notification Text
    action: conversation.process
    data:
      text: >-
        Time: {{ now().strftime("%A %B %d %H:%M %p") }}

        {%- if weather_entity is defined %}

        {%- set temperature_unit = state_attr(weather_entity,
        'temperature_unit') -%}

        Forecast: {{ forecast.condition }} ({{ forecast.temperature }}{{
        temperature_unit }}, {{ forecast.precipitation }}% precipitation)

        {%- endif %}

        Local News Headlines - {{ sensor_local }}  National News - {{
        sensor_national }}

        Calendar "{{ state_attr(calendar_entity, 'friendly_name') }}" events for
        the next {{ calendar_duration.hours }} hours:

        {%- set agenda = (events_response | items | first)[1] %}

        {%- if agenda.events %}
          {%- for event in agenda.events %}
          - Summary: {{ event.summary }}
            Start-End: {% if event.start is defined %}{{ event.start }} to {{ event.end }}{% else %}All Day{% endif %}
            {%- if event.description is defined %}
            Description: {{ event.description }}
            {% endif -%}
            {%- if event.location is defined %}
              Location: {{ event.location }}
            {% endif -%}
          {%- endfor %}
        {%- else %}
          - No upcoming events.
        {%- endif %}

        {{ prompt }}
      agent_id: conversation.google_generative_ai
    response_variable: agent
  - sequence:
      - alias: Send notification
        action: notify.telegram_bot
        data:
          target: null
          title: "{{ now().strftime('%A') }} Agenda"
          message: "{{ agent.response.speech.plain.speech }}"
        enabled: true
      - delay:
          hours: 0
          minutes: 0
          seconds: 1
          milliseconds: 0
      - alias: Send notification
        action: notify.telegram_bot
        data:
          target: null
          title: "Headlines:"
          message: "{{ sensor_local }}, {{ sensor_national }}"
        enabled: false
      - alias: Send notification
        action: notify.telegram_bot
        data:
          target: null
          title: "Current Shopping List:"
          message: >-
            {{ todo_response['todo.shopping_list']['items'] |
            map(attribute='summary') | list }}
